-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Searchterm.Grammar.Gen.Par
  ( happyError
  , myLexer
  , pProg
  , pDecl
  , pClassDecl
  , pFuncDecl
  , pVarDecl
  , pExtend
  , pDef
  , pStmt
  , pForStmt
  , pForInit
  , pAssign
  , pIfStmt
  , pElse
  , pWhileStmt
  , pBlock
  , pKnownTarget
  , pKnownTargetHead
  , pKnownTargetTail
  , pExp
  , pCall
  , pTarget
  , pLit
  , pBoolLit
  , pOp
  , pBoolOp
  , pBoolBinOp
  , pBoolUnOp
  , pCmpOp
  , pCmpBinOp
  , pNumOp
  , pNumBinOp
  , pNumUnOp
  , pStrOp
  , pStrBinOp
  , pParam
  , pArg
  , pListDecl
  , pListFuncDecl
  , pListParam
  , pListArg
  , pMayExtend
  , pMayDef
  , pMayExp
  , pMayVarDecl
  , pMayElse
  , pMayStmt
  , pMayForInit
  , pMayKnownTargetTail
  ) where

import Prelude

import qualified Searchterm.Grammar.Gen.Abs
import Searchterm.Grammar.Gen.Lex
import qualified Data.Text

}

%name pProg_internal Prog
%name pDecl_internal Decl
%name pClassDecl_internal ClassDecl
%name pFuncDecl_internal FuncDecl
%name pVarDecl_internal VarDecl
%name pExtend_internal Extend
%name pDef_internal Def
%name pStmt_internal Stmt
%name pForStmt_internal ForStmt
%name pForInit_internal ForInit
%name pAssign_internal Assign
%name pIfStmt_internal IfStmt
%name pElse_internal Else
%name pWhileStmt_internal WhileStmt
%name pBlock_internal Block
%name pKnownTarget_internal KnownTarget
%name pKnownTargetHead_internal KnownTargetHead
%name pKnownTargetTail_internal KnownTargetTail
%name pExp_internal Exp
%name pCall_internal Call
%name pTarget_internal Target
%name pLit_internal Lit
%name pBoolLit_internal BoolLit
%name pOp_internal Op
%name pBoolOp_internal BoolOp
%name pBoolBinOp_internal BoolBinOp
%name pBoolUnOp_internal BoolUnOp
%name pCmpOp_internal CmpOp
%name pCmpBinOp_internal CmpBinOp
%name pNumOp_internal NumOp
%name pNumBinOp_internal NumBinOp
%name pNumUnOp_internal NumUnOp
%name pStrOp_internal StrOp
%name pStrBinOp_internal StrBinOp
%name pParam_internal Param
%name pArg_internal Arg
%name pListDecl_internal ListDecl
%name pListFuncDecl_internal ListFuncDecl
%name pListParam_internal ListParam
%name pListArg_internal ListArg
%name pMayExtend_internal MayExtend
%name pMayDef_internal MayDef
%name pMayExp_internal MayExp
%name pMayVarDecl_internal MayVarDecl
%name pMayElse_internal MayElse
%name pMayStmt_internal MayStmt
%name pMayForInit_internal MayForInit
%name pMayKnownTargetTail_internal MayKnownTargetTail
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '!='     { PT _ (TS _ 2)  }
  '('      { PT _ (TS _ 3)  }
  ')'      { PT _ (TS _ 4)  }
  '*'      { PT _ (TS _ 5)  }
  '+'      { PT _ (TS _ 6)  }
  '++'     { PT _ (TS _ 7)  }
  ','      { PT _ (TS _ 8)  }
  '-'      { PT _ (TS _ 9)  }
  '.'      { PT _ (TS _ 10) }
  '/'      { PT _ (TS _ 11) }
  ';'      { PT _ (TS _ 12) }
  '<'      { PT _ (TS _ 13) }
  '<='     { PT _ (TS _ 14) }
  '='      { PT _ (TS _ 15) }
  '=='     { PT _ (TS _ 16) }
  '>'      { PT _ (TS _ 17) }
  '>='     { PT _ (TS _ 18) }
  'and'    { PT _ (TS _ 19) }
  'class'  { PT _ (TS _ 20) }
  'else'   { PT _ (TS _ 21) }
  'false'  { PT _ (TS _ 22) }
  'for'    { PT _ (TS _ 23) }
  'fun'    { PT _ (TS _ 24) }
  'if'     { PT _ (TS _ 25) }
  'nil'    { PT _ (TS _ 26) }
  'or'     { PT _ (TS _ 27) }
  'print'  { PT _ (TS _ 28) }
  'return' { PT _ (TS _ 29) }
  'super'  { PT _ (TS _ 30) }
  'this'   { PT _ (TS _ 31) }
  'true'   { PT _ (TS _ 32) }
  'var'    { PT _ (TS _ 33) }
  'while'  { PT _ (TS _ 34) }
  '{'      { PT _ (TS _ 35) }
  '}'      { PT _ (TS _ 36) }
  L_Ident  { PT _ (TV _)    }
  L_integ  { PT _ (TI _)    }
  L_quoted { PT _ (TL _)    }

%%

Ident :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Ident) }
Ident  : L_Ident { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.Ident (tokenText $1)) }

Integer :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), (read (Data.Text.unpack (tokenText $1))) :: Integer) }

String  :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, String) }
String   : L_quoted { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), (Data.Text.unpack ((\(PT _ (TL s)) -> s) $1))) }

Prog :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Prog) }
Prog
  : ListDecl { (fst $1, Searchterm.Grammar.Gen.Abs.Prog (fst $1) (snd $1)) }

Decl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Decl) }
Decl
  : ClassDecl { (fst $1, Searchterm.Grammar.Gen.Abs.DeclClass (fst $1) (snd $1)) }
  | FuncDecl { (fst $1, Searchterm.Grammar.Gen.Abs.DeclFunc (fst $1) (snd $1)) }
  | VarDecl ';' { (fst $1, Searchterm.Grammar.Gen.Abs.DeclVar (fst $1) (snd $1)) }
  | Stmt { (fst $1, Searchterm.Grammar.Gen.Abs.DeclStmt (fst $1) (snd $1)) }

ClassDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.ClassDecl) }
ClassDecl
  : 'class' Ident MayExtend '{' ListFuncDecl '}' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.ClassDecl (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5)) }

FuncDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.FuncDecl) }
FuncDecl
  : 'fun' Ident '(' ListParam ')' Block { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.FuncDecl (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }

VarDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.VarDecl) }
VarDecl
  : 'var' Ident MayDef { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.VarDecl (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

Extend :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Extend) }
Extend
  : Ident { (fst $1, Searchterm.Grammar.Gen.Abs.Extend (fst $1) (snd $1)) }

Def :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Def) }
Def
  : Exp { (fst $1, Searchterm.Grammar.Gen.Abs.Def (fst $1) (snd $1)) }

Stmt :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Stmt) }
Stmt
  : ForStmt { (fst $1, Searchterm.Grammar.Gen.Abs.StmtFor (fst $1) (snd $1)) }
  | IfStmt { (fst $1, Searchterm.Grammar.Gen.Abs.StmtIf (fst $1) (snd $1)) }
  | 'print' Exp ';' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.StmtPrint (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'return' Exp ';' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.StmtReturn (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | WhileStmt { (fst $1, Searchterm.Grammar.Gen.Abs.StmtWhile (fst $1) (snd $1)) }
  | Block { (fst $1, Searchterm.Grammar.Gen.Abs.StmtBlock (fst $1) (snd $1)) }
  | Assign ';' { (fst $1, Searchterm.Grammar.Gen.Abs.StmtAssign (fst $1) (snd $1)) }
  | Call ';' { (fst $1, Searchterm.Grammar.Gen.Abs.StmtCall (fst $1) (snd $1)) }

ForStmt :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.ForStmt) }
ForStmt
  : 'for' '(' MayForInit ';' MayExp ';' MayStmt ')' Stmt { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.ForStmt (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7) (snd $9)) }

ForInit :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.ForInit) }
ForInit
  : VarDecl { (fst $1, Searchterm.Grammar.Gen.Abs.ForInitDecl (fst $1) (snd $1)) }
  | Assign { (fst $1, Searchterm.Grammar.Gen.Abs.ForInitAssign (fst $1) (snd $1)) }

Assign :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Assign) }
Assign
  : Target '=' Exp { (fst $1, Searchterm.Grammar.Gen.Abs.Assign (fst $1) (snd $1) (snd $3)) }

IfStmt :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.IfStmt) }
IfStmt
  : 'if' '(' Exp ')' Stmt MayElse { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.IfStmt (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $6)) }

Else :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Else) }
Else
  : 'else' Stmt { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.Else (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

WhileStmt :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.WhileStmt) }
WhileStmt
  : 'while' '(' Exp ')' Stmt { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.WhileStmt (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }

Block :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Block) }
Block
  : '{' ListDecl '}' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.Block (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

KnownTarget :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.KnownTarget) }
KnownTarget
  : KnownTargetHead MayKnownTargetTail { (fst $1, Searchterm.Grammar.Gen.Abs.KnownTarget (fst $1) (snd $1) (snd $2)) }

KnownTargetHead :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.KnownTargetHead) }
KnownTargetHead
  : 'this' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.KnownTargetHeadThis (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'super' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.KnownTargetHeadSuper (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | Ident { (fst $1, Searchterm.Grammar.Gen.Abs.KnownTargetHeadIdent (fst $1) (snd $1)) }

KnownTargetTail :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.KnownTargetTail) }
KnownTargetTail
  : '.' Ident MayKnownTargetTail { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.KnownTargetTail (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

Exp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Exp) }
Exp
  : 'nil' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.ExpNil (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | Target { (fst $1, Searchterm.Grammar.Gen.Abs.ExpTarget (fst $1) (snd $1)) }
  | Ident { (fst $1, Searchterm.Grammar.Gen.Abs.ExpVar (fst $1) (snd $1)) }
  | Lit { (fst $1, Searchterm.Grammar.Gen.Abs.ExpLit (fst $1) (snd $1)) }
  | Op { (fst $1, Searchterm.Grammar.Gen.Abs.ExpOp (fst $1) (snd $1)) }
  | Call { (fst $1, Searchterm.Grammar.Gen.Abs.ExpCall (fst $1) (snd $1)) }

Call :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Call) }
Call
  : Target '(' ListArg ')' { (fst $1, Searchterm.Grammar.Gen.Abs.Call (fst $1) (snd $1) (snd $3)) }

Target :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Target) }
Target
  : KnownTarget { (fst $1, Searchterm.Grammar.Gen.Abs.TargetKnown (fst $1) (snd $1)) }
  | '(' Exp ')' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.TargetExp (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Lit :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Lit) }
Lit
  : BoolLit { (fst $1, Searchterm.Grammar.Gen.Abs.LitBool (fst $1) (snd $1)) }
  | Integer { (fst $1, Searchterm.Grammar.Gen.Abs.LitInt (fst $1) (snd $1)) }
  | String { (fst $1, Searchterm.Grammar.Gen.Abs.LitString (fst $1) (snd $1)) }

BoolLit :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.BoolLit) }
BoolLit
  : 'true' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.BoolLitTrue (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.BoolLitFalse (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

Op :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Op) }
Op
  : BoolOp { (fst $1, Searchterm.Grammar.Gen.Abs.OpBool (fst $1) (snd $1)) }
  | NumOp { (fst $1, Searchterm.Grammar.Gen.Abs.OpNum (fst $1) (snd $1)) }
  | CmpOp { (fst $1, Searchterm.Grammar.Gen.Abs.OpCmp (fst $1) (snd $1)) }
  | StrOp { (fst $1, Searchterm.Grammar.Gen.Abs.OpStr (fst $1) (snd $1)) }

BoolOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.BoolOp) }
BoolOp
  : Exp BoolBinOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.BoolOpBin (fst $1) (snd $1) (snd $2) (snd $3)) }
  | BoolUnOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.BoolOpUn (fst $1) (snd $1) (snd $2)) }

BoolBinOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.BoolBinOp) }
BoolBinOp
  : 'or' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.BoolBinOpOr (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'and' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.BoolBinOpAnd (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

BoolUnOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.BoolUnOp) }
BoolUnOp
  : '!' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.BoolUnOpNot (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

CmpOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.CmpOp) }
CmpOp
  : Exp CmpBinOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.CmpOpBin (fst $1) (snd $1) (snd $2) (snd $3)) }

CmpBinOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.CmpBinOp) }
CmpBinOp
  : '==' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpEq (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpNe (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpGt (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpGe (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpLt (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.CmpBinOpLe (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

NumOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.NumOp) }
NumOp
  : Exp NumBinOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.NumOpBin (fst $1) (snd $1) (snd $2) (snd $3)) }
  | NumUnOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.NumOpUn (fst $1) (snd $1) (snd $2)) }

NumBinOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.NumBinOp) }
NumBinOp
  : '+' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.NumBinOpAdd (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.NumBinOpSub (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '*' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.NumBinOpMul (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.NumBinOpDiv (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

NumUnOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.NumUnOp) }
NumUnOp
  : '-' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.NumUnOpNeg (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

StrOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.StrOp) }
StrOp
  : Exp StrBinOp Exp { (fst $1, Searchterm.Grammar.Gen.Abs.StrOpBin (fst $1) (snd $1) (snd $2) (snd $3)) }

StrBinOp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.StrBinOp) }
StrBinOp
  : '++' { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.StrBinOpAppend (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1))) }

Param :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Param) }
Param
  : Ident { (fst $1, Searchterm.Grammar.Gen.Abs.Param (fst $1) (snd $1)) }

Arg :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.Arg) }
Arg
  : Exp { (fst $1, Searchterm.Grammar.Gen.Abs.Arg (fst $1) (snd $1)) }

ListDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, [Searchterm.Grammar.Gen.Abs.Decl]) }
ListDecl
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, []) }
  | Decl ListDecl { (fst $1, (:) (snd $1) (snd $2)) }

ListFuncDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, [Searchterm.Grammar.Gen.Abs.FuncDecl]) }
ListFuncDecl
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, []) }
  | FuncDecl ListFuncDecl { (fst $1, (:) (snd $1) (snd $2)) }

ListParam :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, [Searchterm.Grammar.Gen.Abs.Param]) }
ListParam
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, []) }
  | Param ',' ListParam { (fst $1, (:) (snd $1) (snd $3)) }

ListArg :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, [Searchterm.Grammar.Gen.Abs.Arg]) }
ListArg
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, []) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

MayExtend :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayExtend) }
MayExtend
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayExtendNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | '<' Extend { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.MayExtendSome (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

MayDef :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayDef) }
MayDef
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayDefNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | '=' Def { (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1), Searchterm.Grammar.Gen.Abs.MayDefSome (uncurry Searchterm.Grammar.Gen.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }

MayExp :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayExp) }
MayExp
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayExpNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | Exp { (fst $1, Searchterm.Grammar.Gen.Abs.MayExpSome (fst $1) (snd $1)) }

MayVarDecl :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayVarDecl) }
MayVarDecl
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayVarDeclNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | VarDecl { (fst $1, Searchterm.Grammar.Gen.Abs.MayVarDeclSome (fst $1) (snd $1)) }

MayElse :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayElse) }
MayElse
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayElseNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | Else { (fst $1, Searchterm.Grammar.Gen.Abs.MayElseSome (fst $1) (snd $1)) }

MayStmt :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayStmt) }
MayStmt
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayStmtNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | Stmt { (fst $1, Searchterm.Grammar.Gen.Abs.MayStmtSome (fst $1) (snd $1)) }

MayForInit :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayForInit) }
MayForInit
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayForInitNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | ForInit { (fst $1, Searchterm.Grammar.Gen.Abs.MayForInitSome (fst $1) (snd $1)) }

MayKnownTargetTail :: { (Searchterm.Grammar.Gen.Abs.BNFC'Position, Searchterm.Grammar.Gen.Abs.MayKnownTargetTail) }
MayKnownTargetTail
  : {- empty -} { (Searchterm.Grammar.Gen.Abs.BNFC'NoPosition, Searchterm.Grammar.Gen.Abs.MayKnownTargetTailNone Searchterm.Grammar.Gen.Abs.BNFC'NoPosition) }
  | KnownTargetTail { (fst $1, Searchterm.Grammar.Gen.Abs.MayKnownTargetTailSome (fst $1) (snd $1)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: Data.Text.Text -> [Token]
myLexer = tokens

-- Entrypoints

pProg :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Prog
pProg = fmap snd . pProg_internal

pDecl :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Decl
pDecl = fmap snd . pDecl_internal

pClassDecl :: [Token] -> Err Searchterm.Grammar.Gen.Abs.ClassDecl
pClassDecl = fmap snd . pClassDecl_internal

pFuncDecl :: [Token] -> Err Searchterm.Grammar.Gen.Abs.FuncDecl
pFuncDecl = fmap snd . pFuncDecl_internal

pVarDecl :: [Token] -> Err Searchterm.Grammar.Gen.Abs.VarDecl
pVarDecl = fmap snd . pVarDecl_internal

pExtend :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Extend
pExtend = fmap snd . pExtend_internal

pDef :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Def
pDef = fmap snd . pDef_internal

pStmt :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Stmt
pStmt = fmap snd . pStmt_internal

pForStmt :: [Token] -> Err Searchterm.Grammar.Gen.Abs.ForStmt
pForStmt = fmap snd . pForStmt_internal

pForInit :: [Token] -> Err Searchterm.Grammar.Gen.Abs.ForInit
pForInit = fmap snd . pForInit_internal

pAssign :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Assign
pAssign = fmap snd . pAssign_internal

pIfStmt :: [Token] -> Err Searchterm.Grammar.Gen.Abs.IfStmt
pIfStmt = fmap snd . pIfStmt_internal

pElse :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Else
pElse = fmap snd . pElse_internal

pWhileStmt :: [Token] -> Err Searchterm.Grammar.Gen.Abs.WhileStmt
pWhileStmt = fmap snd . pWhileStmt_internal

pBlock :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Block
pBlock = fmap snd . pBlock_internal

pKnownTarget :: [Token] -> Err Searchterm.Grammar.Gen.Abs.KnownTarget
pKnownTarget = fmap snd . pKnownTarget_internal

pKnownTargetHead :: [Token] -> Err Searchterm.Grammar.Gen.Abs.KnownTargetHead
pKnownTargetHead = fmap snd . pKnownTargetHead_internal

pKnownTargetTail :: [Token] -> Err Searchterm.Grammar.Gen.Abs.KnownTargetTail
pKnownTargetTail = fmap snd . pKnownTargetTail_internal

pExp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Exp
pExp = fmap snd . pExp_internal

pCall :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Call
pCall = fmap snd . pCall_internal

pTarget :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Target
pTarget = fmap snd . pTarget_internal

pLit :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Lit
pLit = fmap snd . pLit_internal

pBoolLit :: [Token] -> Err Searchterm.Grammar.Gen.Abs.BoolLit
pBoolLit = fmap snd . pBoolLit_internal

pOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Op
pOp = fmap snd . pOp_internal

pBoolOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.BoolOp
pBoolOp = fmap snd . pBoolOp_internal

pBoolBinOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.BoolBinOp
pBoolBinOp = fmap snd . pBoolBinOp_internal

pBoolUnOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.BoolUnOp
pBoolUnOp = fmap snd . pBoolUnOp_internal

pCmpOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.CmpOp
pCmpOp = fmap snd . pCmpOp_internal

pCmpBinOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.CmpBinOp
pCmpBinOp = fmap snd . pCmpBinOp_internal

pNumOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.NumOp
pNumOp = fmap snd . pNumOp_internal

pNumBinOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.NumBinOp
pNumBinOp = fmap snd . pNumBinOp_internal

pNumUnOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.NumUnOp
pNumUnOp = fmap snd . pNumUnOp_internal

pStrOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.StrOp
pStrOp = fmap snd . pStrOp_internal

pStrBinOp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.StrBinOp
pStrBinOp = fmap snd . pStrBinOp_internal

pParam :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Param
pParam = fmap snd . pParam_internal

pArg :: [Token] -> Err Searchterm.Grammar.Gen.Abs.Arg
pArg = fmap snd . pArg_internal

pListDecl :: [Token] -> Err [Searchterm.Grammar.Gen.Abs.Decl]
pListDecl = fmap snd . pListDecl_internal

pListFuncDecl :: [Token] -> Err [Searchterm.Grammar.Gen.Abs.FuncDecl]
pListFuncDecl = fmap snd . pListFuncDecl_internal

pListParam :: [Token] -> Err [Searchterm.Grammar.Gen.Abs.Param]
pListParam = fmap snd . pListParam_internal

pListArg :: [Token] -> Err [Searchterm.Grammar.Gen.Abs.Arg]
pListArg = fmap snd . pListArg_internal

pMayExtend :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayExtend
pMayExtend = fmap snd . pMayExtend_internal

pMayDef :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayDef
pMayDef = fmap snd . pMayDef_internal

pMayExp :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayExp
pMayExp = fmap snd . pMayExp_internal

pMayVarDecl :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayVarDecl
pMayVarDecl = fmap snd . pMayVarDecl_internal

pMayElse :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayElse
pMayElse = fmap snd . pMayElse_internal

pMayStmt :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayStmt
pMayStmt = fmap snd . pMayStmt_internal

pMayForInit :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayForInit
pMayForInit = fmap snd . pMayForInit_internal

pMayKnownTargetTail :: [Token] -> Err Searchterm.Grammar.Gen.Abs.MayKnownTargetTail
pMayKnownTargetTail = fmap snd . pMayKnownTargetTail_internal
}

