-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Searchterm.Grammar.Gen.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Searchterm.Grammar.Gen.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transName :: Searchterm.Grammar.Gen.Abs.Name -> Result
transName x = case x of
  Searchterm.Grammar.Gen.Abs.Name string -> failure x

transSignedInteger :: Searchterm.Grammar.Gen.Abs.SignedInteger -> Result
transSignedInteger x = case x of
  Searchterm.Grammar.Gen.Abs.SignedInteger string -> failure x

transSignedScientific :: Searchterm.Grammar.Gen.Abs.SignedScientific -> Result
transSignedScientific x = case x of
  Searchterm.Grammar.Gen.Abs.SignedScientific string -> failure x

transLines :: Searchterm.Grammar.Gen.Abs.Lines -> Result
transLines x = case x of
  Searchterm.Grammar.Gen.Abs.Lines lines -> failure x

transLine :: Searchterm.Grammar.Gen.Abs.Line -> Result
transLine x = case x of
  Searchterm.Grammar.Gen.Abs.LineType name names -> failure x
  Searchterm.Grammar.Gen.Abs.LineCons name names -> failure x
  Searchterm.Grammar.Gen.Abs.LineMod name -> failure x
  Searchterm.Grammar.Gen.Abs.LineLit name lits -> failure x

transLit :: Searchterm.Grammar.Gen.Abs.Lit -> Result
transLit x = case x of
  Searchterm.Grammar.Gen.Abs.LitScientific signedscientific -> failure x
  Searchterm.Grammar.Gen.Abs.LitInteger signedinteger -> failure x
  Searchterm.Grammar.Gen.Abs.LitString string -> failure x
  Searchterm.Grammar.Gen.Abs.LitChar char -> failure x
