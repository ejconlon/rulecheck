-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Searchterm.Grammar.Gen.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Searchterm.Grammar.Gen.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Searchterm.Grammar.Gen.Abs.Ident -> Result
transIdent x = case x of
  Searchterm.Grammar.Gen.Abs.Ident string -> failure x

transProg :: Show a => Searchterm.Grammar.Gen.Abs.Prog' a -> Result
transProg x = case x of
  Searchterm.Grammar.Gen.Abs.Prog _ decls -> failure x

transDecl :: Show a => Searchterm.Grammar.Gen.Abs.Decl' a -> Result
transDecl x = case x of
  Searchterm.Grammar.Gen.Abs.DeclClass _ classdecl -> failure x
  Searchterm.Grammar.Gen.Abs.DeclFunc _ funcdecl -> failure x
  Searchterm.Grammar.Gen.Abs.DeclVar _ vardecl -> failure x
  Searchterm.Grammar.Gen.Abs.DeclStmt _ stmt -> failure x

transClassDecl :: Show a => Searchterm.Grammar.Gen.Abs.ClassDecl' a -> Result
transClassDecl x = case x of
  Searchterm.Grammar.Gen.Abs.ClassDecl _ ident mayextend funcdecls -> failure x

transFuncDecl :: Show a => Searchterm.Grammar.Gen.Abs.FuncDecl' a -> Result
transFuncDecl x = case x of
  Searchterm.Grammar.Gen.Abs.FuncDecl _ ident params block -> failure x

transVarDecl :: Show a => Searchterm.Grammar.Gen.Abs.VarDecl' a -> Result
transVarDecl x = case x of
  Searchterm.Grammar.Gen.Abs.VarDecl _ ident maydef -> failure x

transExtend :: Show a => Searchterm.Grammar.Gen.Abs.Extend' a -> Result
transExtend x = case x of
  Searchterm.Grammar.Gen.Abs.Extend _ ident -> failure x

transDef :: Show a => Searchterm.Grammar.Gen.Abs.Def' a -> Result
transDef x = case x of
  Searchterm.Grammar.Gen.Abs.Def _ exp -> failure x

transStmt :: Show a => Searchterm.Grammar.Gen.Abs.Stmt' a -> Result
transStmt x = case x of
  Searchterm.Grammar.Gen.Abs.StmtFor _ forstmt -> failure x
  Searchterm.Grammar.Gen.Abs.StmtIf _ ifstmt -> failure x
  Searchterm.Grammar.Gen.Abs.StmtPrint _ exp -> failure x
  Searchterm.Grammar.Gen.Abs.StmtReturn _ exp -> failure x
  Searchterm.Grammar.Gen.Abs.StmtWhile _ whilestmt -> failure x
  Searchterm.Grammar.Gen.Abs.StmtBlock _ block -> failure x
  Searchterm.Grammar.Gen.Abs.StmtAssign _ assign -> failure x
  Searchterm.Grammar.Gen.Abs.StmtCall _ call -> failure x

transForStmt :: Show a => Searchterm.Grammar.Gen.Abs.ForStmt' a -> Result
transForStmt x = case x of
  Searchterm.Grammar.Gen.Abs.ForStmt _ mayforinit mayexp maystmt stmt -> failure x

transForInit :: Show a => Searchterm.Grammar.Gen.Abs.ForInit' a -> Result
transForInit x = case x of
  Searchterm.Grammar.Gen.Abs.ForInitDecl _ vardecl -> failure x
  Searchterm.Grammar.Gen.Abs.ForInitAssign _ assign -> failure x

transAssign :: Show a => Searchterm.Grammar.Gen.Abs.Assign' a -> Result
transAssign x = case x of
  Searchterm.Grammar.Gen.Abs.Assign _ target exp -> failure x

transIfStmt :: Show a => Searchterm.Grammar.Gen.Abs.IfStmt' a -> Result
transIfStmt x = case x of
  Searchterm.Grammar.Gen.Abs.IfStmt _ exp stmt mayelse -> failure x

transElse :: Show a => Searchterm.Grammar.Gen.Abs.Else' a -> Result
transElse x = case x of
  Searchterm.Grammar.Gen.Abs.Else _ stmt -> failure x

transWhileStmt :: Show a => Searchterm.Grammar.Gen.Abs.WhileStmt' a -> Result
transWhileStmt x = case x of
  Searchterm.Grammar.Gen.Abs.WhileStmt _ exp stmt -> failure x

transBlock :: Show a => Searchterm.Grammar.Gen.Abs.Block' a -> Result
transBlock x = case x of
  Searchterm.Grammar.Gen.Abs.Block _ decls -> failure x

transKnownTarget :: Show a => Searchterm.Grammar.Gen.Abs.KnownTarget' a -> Result
transKnownTarget x = case x of
  Searchterm.Grammar.Gen.Abs.KnownTarget _ knowntargethead mayknowntargettail -> failure x

transKnownTargetHead :: Show a => Searchterm.Grammar.Gen.Abs.KnownTargetHead' a -> Result
transKnownTargetHead x = case x of
  Searchterm.Grammar.Gen.Abs.KnownTargetHeadThis _ -> failure x
  Searchterm.Grammar.Gen.Abs.KnownTargetHeadSuper _ -> failure x
  Searchterm.Grammar.Gen.Abs.KnownTargetHeadIdent _ ident -> failure x

transKnownTargetTail :: Show a => Searchterm.Grammar.Gen.Abs.KnownTargetTail' a -> Result
transKnownTargetTail x = case x of
  Searchterm.Grammar.Gen.Abs.KnownTargetTail _ ident mayknowntargettail -> failure x

transExp :: Show a => Searchterm.Grammar.Gen.Abs.Exp' a -> Result
transExp x = case x of
  Searchterm.Grammar.Gen.Abs.ExpNil _ -> failure x
  Searchterm.Grammar.Gen.Abs.ExpTarget _ target -> failure x
  Searchterm.Grammar.Gen.Abs.ExpVar _ ident -> failure x
  Searchterm.Grammar.Gen.Abs.ExpLit _ lit -> failure x
  Searchterm.Grammar.Gen.Abs.ExpOp _ op -> failure x
  Searchterm.Grammar.Gen.Abs.ExpCall _ call -> failure x

transCall :: Show a => Searchterm.Grammar.Gen.Abs.Call' a -> Result
transCall x = case x of
  Searchterm.Grammar.Gen.Abs.Call _ target args -> failure x

transTarget :: Show a => Searchterm.Grammar.Gen.Abs.Target' a -> Result
transTarget x = case x of
  Searchterm.Grammar.Gen.Abs.TargetKnown _ knowntarget -> failure x
  Searchterm.Grammar.Gen.Abs.TargetExp _ exp -> failure x

transLit :: Show a => Searchterm.Grammar.Gen.Abs.Lit' a -> Result
transLit x = case x of
  Searchterm.Grammar.Gen.Abs.LitBool _ boollit -> failure x
  Searchterm.Grammar.Gen.Abs.LitInt _ integer -> failure x
  Searchterm.Grammar.Gen.Abs.LitString _ string -> failure x

transBoolLit :: Show a => Searchterm.Grammar.Gen.Abs.BoolLit' a -> Result
transBoolLit x = case x of
  Searchterm.Grammar.Gen.Abs.BoolLitTrue _ -> failure x
  Searchterm.Grammar.Gen.Abs.BoolLitFalse _ -> failure x

transOp :: Show a => Searchterm.Grammar.Gen.Abs.Op' a -> Result
transOp x = case x of
  Searchterm.Grammar.Gen.Abs.OpBool _ boolop -> failure x
  Searchterm.Grammar.Gen.Abs.OpNum _ numop -> failure x
  Searchterm.Grammar.Gen.Abs.OpCmp _ cmpop -> failure x
  Searchterm.Grammar.Gen.Abs.OpStr _ strop -> failure x

transBoolOp :: Show a => Searchterm.Grammar.Gen.Abs.BoolOp' a -> Result
transBoolOp x = case x of
  Searchterm.Grammar.Gen.Abs.BoolOpBin _ exp1 boolbinop exp2 -> failure x
  Searchterm.Grammar.Gen.Abs.BoolOpUn _ boolunop exp -> failure x

transBoolBinOp :: Show a => Searchterm.Grammar.Gen.Abs.BoolBinOp' a -> Result
transBoolBinOp x = case x of
  Searchterm.Grammar.Gen.Abs.BoolBinOpOr _ -> failure x
  Searchterm.Grammar.Gen.Abs.BoolBinOpAnd _ -> failure x

transBoolUnOp :: Show a => Searchterm.Grammar.Gen.Abs.BoolUnOp' a -> Result
transBoolUnOp x = case x of
  Searchterm.Grammar.Gen.Abs.BoolUnOpNot _ -> failure x

transCmpOp :: Show a => Searchterm.Grammar.Gen.Abs.CmpOp' a -> Result
transCmpOp x = case x of
  Searchterm.Grammar.Gen.Abs.CmpOpBin _ exp1 cmpbinop exp2 -> failure x

transCmpBinOp :: Show a => Searchterm.Grammar.Gen.Abs.CmpBinOp' a -> Result
transCmpBinOp x = case x of
  Searchterm.Grammar.Gen.Abs.CmpBinOpEq _ -> failure x
  Searchterm.Grammar.Gen.Abs.CmpBinOpNe _ -> failure x
  Searchterm.Grammar.Gen.Abs.CmpBinOpGt _ -> failure x
  Searchterm.Grammar.Gen.Abs.CmpBinOpGe _ -> failure x
  Searchterm.Grammar.Gen.Abs.CmpBinOpLt _ -> failure x
  Searchterm.Grammar.Gen.Abs.CmpBinOpLe _ -> failure x

transNumOp :: Show a => Searchterm.Grammar.Gen.Abs.NumOp' a -> Result
transNumOp x = case x of
  Searchterm.Grammar.Gen.Abs.NumOpBin _ exp1 numbinop exp2 -> failure x
  Searchterm.Grammar.Gen.Abs.NumOpUn _ numunop exp -> failure x

transNumBinOp :: Show a => Searchterm.Grammar.Gen.Abs.NumBinOp' a -> Result
transNumBinOp x = case x of
  Searchterm.Grammar.Gen.Abs.NumBinOpAdd _ -> failure x
  Searchterm.Grammar.Gen.Abs.NumBinOpSub _ -> failure x
  Searchterm.Grammar.Gen.Abs.NumBinOpMul _ -> failure x
  Searchterm.Grammar.Gen.Abs.NumBinOpDiv _ -> failure x

transNumUnOp :: Show a => Searchterm.Grammar.Gen.Abs.NumUnOp' a -> Result
transNumUnOp x = case x of
  Searchterm.Grammar.Gen.Abs.NumUnOpNeg _ -> failure x

transStrOp :: Show a => Searchterm.Grammar.Gen.Abs.StrOp' a -> Result
transStrOp x = case x of
  Searchterm.Grammar.Gen.Abs.StrOpBin _ exp1 strbinop exp2 -> failure x

transStrBinOp :: Show a => Searchterm.Grammar.Gen.Abs.StrBinOp' a -> Result
transStrBinOp x = case x of
  Searchterm.Grammar.Gen.Abs.StrBinOpAppend _ -> failure x

transParam :: Show a => Searchterm.Grammar.Gen.Abs.Param' a -> Result
transParam x = case x of
  Searchterm.Grammar.Gen.Abs.Param _ ident -> failure x

transArg :: Show a => Searchterm.Grammar.Gen.Abs.Arg' a -> Result
transArg x = case x of
  Searchterm.Grammar.Gen.Abs.Arg _ exp -> failure x

transMayExtend :: Show a => Searchterm.Grammar.Gen.Abs.MayExtend' a -> Result
transMayExtend x = case x of
  Searchterm.Grammar.Gen.Abs.MayExtendNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayExtendSome _ extend -> failure x

transMayDef :: Show a => Searchterm.Grammar.Gen.Abs.MayDef' a -> Result
transMayDef x = case x of
  Searchterm.Grammar.Gen.Abs.MayDefNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayDefSome _ def -> failure x

transMayExp :: Show a => Searchterm.Grammar.Gen.Abs.MayExp' a -> Result
transMayExp x = case x of
  Searchterm.Grammar.Gen.Abs.MayExpNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayExpSome _ exp -> failure x

transMayVarDecl :: Show a => Searchterm.Grammar.Gen.Abs.MayVarDecl' a -> Result
transMayVarDecl x = case x of
  Searchterm.Grammar.Gen.Abs.MayVarDeclNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayVarDeclSome _ vardecl -> failure x

transMayElse :: Show a => Searchterm.Grammar.Gen.Abs.MayElse' a -> Result
transMayElse x = case x of
  Searchterm.Grammar.Gen.Abs.MayElseNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayElseSome _ else_ -> failure x

transMayStmt :: Show a => Searchterm.Grammar.Gen.Abs.MayStmt' a -> Result
transMayStmt x = case x of
  Searchterm.Grammar.Gen.Abs.MayStmtNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayStmtSome _ stmt -> failure x

transMayForInit :: Show a => Searchterm.Grammar.Gen.Abs.MayForInit' a -> Result
transMayForInit x = case x of
  Searchterm.Grammar.Gen.Abs.MayForInitNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayForInitSome _ forinit -> failure x

transMayKnownTargetTail :: Show a => Searchterm.Grammar.Gen.Abs.MayKnownTargetTail' a -> Result
transMayKnownTargetTail x = case x of
  Searchterm.Grammar.Gen.Abs.MayKnownTargetTailNone _ -> failure x
  Searchterm.Grammar.Gen.Abs.MayKnownTargetTailSome _ knowntargettail -> failure x
