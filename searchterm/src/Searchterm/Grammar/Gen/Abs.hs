-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Gen.

module Searchterm.Grammar.Gen.Abs where

import Prelude (Char, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Text

data Lines = Lines [Line]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Line
    = LineType TyName [TyVar]
    | LineCons TyName [ConName]
    | LineMod ModName
    | LineLit [Lit]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lit
    = LitFloat SignedFloat
    | LitInteger SignedInt
    | LitString String
    | LitChar Char
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype SignedInt = SignedInt Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype SignedFloat = SignedFloat Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TyName = TyName Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TyVar = TyVar Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype ConName = ConName Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TmName = TmName Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype ModName = ModName Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

