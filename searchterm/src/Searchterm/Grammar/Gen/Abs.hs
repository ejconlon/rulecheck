-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Gen.

module Searchterm.Grammar.Gen.Abs where

import Prelude (Char, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

import qualified Data.Text

data Lines = Lines [Line]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Line
    = LineType Name [Name]
    | LineCons Name [Name]
    | LineInst Straints InstName
    | LineFunc Name FuncSig
    | LineCls Straints InstName
    | LineMod Name
    | LineLit Name [Lit]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FuncSig
    = FuncSigBase Name
    | FuncSigParen FuncSig
    | FuncSigArr FuncSig FuncSig
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lit
    = LitScientific SignedScientific
    | LitInteger SignedInteger
    | LitString String
    | LitChar Char
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Straints
    = StraintsNone | StraintsOne InstName | StraintsMany [InstName]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TyName = TyNameBase Name | TyNameParen TyName [TyName]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InstName = InstName Name
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Name = Name Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype SignedInteger = SignedInteger Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype SignedScientific = SignedScientific Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

