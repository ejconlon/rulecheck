-- A reasonable Prelude for experimenting with synthesis
-- Some things have been changed for easier parsing (just to bootstrap)
-- (a, b) -> Tuple a b, [a] -> List a
-- Constructors are marked as such (for destruct tactics)
-- Everything exists in one namespace, so names should be fully qualified

module Tuple
data Tuple a b
MkTuple :: a -> b -> Tuple a b
constructors Tuple MkTuple
instance (Eq a, Eq b) => Eq (Tuple a b)
instance (Ord a, Ord b) => Ord (Tuple a b)
instance (Show a, Show b) => Show (Tuple a b)
fst :: Tuple a b -> a
snd :: Tuple a b -> b
curry :: (Tuple a b -> c) -> a -> b -> c
uncurry :: (a -> b -> c) -> Tuple a b -> c
swap :: Tuple a b -> Tuple b a

module Bool
data Bool
False :: Bool
True :: Bool
constructors Bool False True
instance Eq Bool
instance Ord Bool
instance Show Bool
(&&) :: Bool -> Bool -> Bool
(||) :: Bool -> Bool -> Bool
not :: Bool -> Bool
bool :: a -> a -> Bool -> a

module Eq
class Eq a
(==) :: Eq a => a -> a -> Bool
(/=) :: Eq a => a -> a -> Bool

module Maybe
data Maybe a
Nothing :: Maybe a
Just :: a -> Maybe a
constructors Maybe Nothing Just
instance Eq a => Eq (Maybe a)
instance Ord a => Ord (Maybe a)
instance Show a => Show (Maybe a)
maybe :: b -> (a -> b) -> Maybe a -> b
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromJust :: Maybe a -> a
fromMaybe :: a -> Maybe a -> a
listToMaybe :: List a -> Maybe a
maybeToList :: Maybe a -> List a
catMaybes :: List (Maybe a) -> List a
mapMaybe :: (a -> Maybe b) -> List a -> List b

module List
data List a
Nil :: List a
Cons :: a -> List a -> List a
constructors List Nil Cons
instance Eq a => Eq (List a)
instance Ord a => Ord (List a)
instance Show a => Show (List a)
map :: (a -> b) -> List a -> List b
(++) :: List a -> List a -> List a
filter :: (a -> Bool) -> List a -> List a
concat :: List (List a) -> List a
head :: List a -> a
last :: List a -> a
tail :: List a -> List a
init :: List a -> List a
uncons :: List a -> Maybe (Tuple a (List a))
null :: List a -> Bool
length :: List a -> Int
(!!) :: List a -> Int -> a
foldl :: (b -> a -> b) -> b -> List a -> b
scanl :: (b -> a -> b) -> b -> List a -> List b
foldr :: (a -> b -> b) -> b -> List a -> b
scanr :: (a -> b -> b) -> b -> List a -> List b
iterate :: (a -> a) -> a -> List a
repeat :: a -> List a
replicate :: Int -> a -> List a
cycle :: List a -> List a
take :: Int -> List a -> List a
drop :: Int -> List a -> List a
sum :: Num a => List a -> Int
product :: Num a => List a -> Int
maximum :: Ord a => List a -> a
minimum :: Ord a => List a -> a
splitAt :: Int -> List a -> Tuple (List a) (List a)
takeWhile :: (a -> Bool) -> List a -> List a
dropWhile :: (a -> Bool) -> List a -> List a
span :: (a -> Bool) -> List a -> Tuple (List a) (List a)
break :: (a -> Bool) -> List a -> Tuple (List a) (List a)
reverse :: List a -> List a
and :: List Bool -> Bool
or :: List Bool -> Bool
any :: (a -> Bool) -> List a -> Bool
all :: (a -> Bool) -> List a -> Bool
elem :: Eq a => a -> List a -> Bool
notElem :: Eq a => a -> List a -> Bool
lookup :: Eq a => a -> List (Tuple a b) -> Maybe b
concatMap :: (a -> List b) -> List a -> List b
zip :: List a -> List b -> List (Tuple a b)
zipWith :: (a -> b -> c) -> List a -> List b -> List c
unzip :: List (Tuple a b) -> Tuple (List a) (List b)

module Either
data Either a b
Left :: a -> Either a b
Right :: b -> Either a b
constructors Either Left Right
instance (Eq a, Eq b) => Eq (Either a b)
instance (Ord a, Ord b) => Ord (Either a b)
instance (Show a, Show b) => Show (Either a b)
either :: (a -> c) -> (b -> c) -> Either a b -> c
lefts :: List (Either a b) -> List a
rights :: List (Either a b) -> List b
isLeft :: Either a b -> Bool
isRight :: Either a b -> Bool
fromLeft :: a -> Either a b -> a
fromRight :: b -> Either a b -> b
partitionEithers :: List (Either a b) -> Tuple (List a) (List b)

module Num
class Num a
(+) :: Num a => a -> a -> a
(-) :: Num a => a -> a -> a
(*) :: Num a => a -> a -> a
negate :: Num a => a -> a
abs :: Num a => a -> a
signum :: Num a => a -> a

module Int
data Int
instance Eq Int
instance Ord Int
instance Show Int
instance Num Int

module Ordering
data Ordering
LT :: Ordering
EQ :: Ordering
GT :: Ordering
constructors Ordering LT EQ GT
instance Eq Ordering
instance Ord Ordering
instance Show Ordering

module Ord
class Eq a => Ord a
compare :: Ord a => a -> a -> Ordering
(<) :: Ord a => a -> a -> Bool
(<=) :: Ord a => a -> a -> Bool
(>) :: Ord a => a -> a -> Bool
(>=) :: Ord a => a -> a -> Bool
max :: Ord a => a -> a -> Bool
min :: Ord a => a -> a -> Bool

module Show
class Show a
show :: Show a => a -> String

module String
data String
instance Eq String
instance Ord String
instance Show String
