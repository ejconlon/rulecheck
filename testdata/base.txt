-- A reasonable Prelude for experimenting with synthesis
-- Some things have been changed for easier parsing (just to bootstrap)
-- (a, b) -> (,) a b, [a] -> ([]) a
-- Constructors are marked as such (for destruct tactics)
-- Everything exists in one namespace, so names should be fully qualified
-- (Tuple and list types/ctors are exceptions because I don't think they can be qualified.)

module Base.Tuple
data (,) a b
(,) :: a -> b -> (,) a b
constructors (,) (,)
instance (Base.Eq.Eq a, Base.Eq.Eq b) => Base.Eq.Eq ((,) a b)
instance (Base.Ord.Ord a, Base.Ord.Ord b) => Base.Ord.Ord ((,) a b)
instance (Base.Show.Show a, Base.Show.Show b) => Base.Show.Show ((,) a b)
Base.Tuple.fst :: (,) a b -> a
Base.Tuple.snd :: (,) a b -> b
Base.Tuple.curry :: ((,) a b -> c) -> a -> b -> c
Base.Tuple.uncurry :: (a -> b -> c) -> (,) a b -> c
Base.Tuple.swap :: (,) a b -> (,) b a

module Base.Bool
data Base.Bool.Bool
Base.Bool.False :: Base.Bool.Bool
Base.Bool.True :: Base.Bool.Bool
constructors Base.Bool.Bool Base.Bool.False Base.Bool.True
instance Base.Eq.Eq Base.Bool.Bool
instance Base.Ord.Ord Base.Bool.Bool
instance Base.Show.Show Base.Bool.Bool
(Base.Bool.&&) :: Base.Bool.Bool -> Base.Bool.Bool -> Base.Bool.Bool
(Base.Bool.||) :: Base.Bool.Bool -> Base.Bool.Bool -> Base.Bool.Bool
Base.Bool.not :: Base.Bool.Bool -> Base.Bool.Bool
Base.Bool.bool :: a -> a -> Base.Bool.Bool -> a

module Base.Eq
class Base.Eq.Eq a
(Base.Eq.==) :: Base.Eq.Eq a => a -> a -> Base.Bool.Bool
(Base.Eq./=) :: Base.Eq.Eq a => a -> a -> Base.Bool.Bool

module Base.Maybe
data Base.Maybe.Maybe a
Base.Maybe.Nothing :: Base.Maybe.Maybe a
Base.Maybe.Just :: a -> Base.Maybe.Maybe a
constructors Base.Maybe.Maybe Base.Maybe.Nothing Base.Maybe.Just
instance Base.Eq.Eq a => Base.Eq.Eq (Base.Maybe.Maybe a)
instance Base.Ord.Ord a => Base.Ord.Ord (Base.Maybe.Maybe a)
instance Base.Show.Show a => Base.Show.Show (Base.Maybe.Maybe a)
Base.Maybe.maybe :: b -> (a -> b) -> Base.Maybe.Maybe a -> b
Base.Maybe.isJust :: Base.Maybe.Maybe a -> Base.Bool.Bool
Base.Maybe.isNothing :: Base.Maybe.Maybe a -> Base.Bool.Bool
Base.Maybe.fromJust :: Base.Maybe.Maybe a -> a
Base.Maybe.fromMaybe :: a -> Base.Maybe.Maybe a -> a
Base.Maybe.listToMaybe :: ([]) a -> Base.Maybe.Maybe a
Base.Maybe.maybeToBase :: Base.Maybe.Maybe a -> ([]) a
Base.Maybe.catMaybes :: ([]) (Base.Maybe.Maybe a) -> ([]) a
Base.Maybe.mapMaybe :: (a -> Base.Maybe.Maybe b) -> ([]) a -> ([]) b

module Base.List
data ([]) a
([]) :: ([]) a
(:) :: a -> ([]) a -> ([]) a
constructors ([]) ([]) (:)
instance Base.Eq.Eq a => Base.Eq.Eq (([]) a)
instance Base.Ord.Ord a => Base.Ord.Ord (([]) a)
instance Base.Show.Show a => Base.Show.Show (([]) a)
Base.List.map :: (a -> b) -> ([]) a -> ([]) b
(Base.List.++) :: ([]) a -> ([]) a -> ([]) a
Base.List.filter :: (a -> Base.Bool.Bool) -> ([]) a -> ([]) a
Base.List.concat :: ([]) (([]) a) -> ([]) a
Base.List.head :: ([]) a -> a
Base.List.last :: ([]) a -> a
Base.List.tail :: ([]) a -> ([]) a
Base.List.init :: ([]) a -> ([]) a
Base.List.uncons :: ([]) a -> Base.Maybe.Maybe ((,) a (([]) a))
Base.List.null :: ([]) a -> Base.Bool.Bool
Base.List.length :: ([]) a -> Int
(Base.List.!!) :: ([]) a -> Int -> a
Base.List.foldl :: (b -> a -> b) -> b -> ([]) a -> b
Base.List.scanl :: (b -> a -> b) -> b -> ([]) a -> ([]) b
Base.List.foldr :: (a -> b -> b) -> b -> ([]) a -> b
Base.List.scanr :: (a -> b -> b) -> b -> ([]) a -> ([]) b
Base.List.iterate :: (a -> a) -> a -> ([]) a
Base.List.repeat :: a -> ([]) a
Base.List.replicate :: Int -> a -> ([]) a
Base.List.cycle :: ([]) a -> ([]) a
Base.List.take :: Int -> ([]) a -> ([]) a
Base.List.drop :: Int -> ([]) a -> ([]) a
Base.List.sum :: Num a => ([]) a -> Int
Base.List.product :: Num a => ([]) a -> Int
Base.List.maximum :: Base.Ord.Ord a => ([]) a -> a
Base.List.minimum :: Base.Ord.Ord a => ([]) a -> a
Base.List.splitAt :: Int -> ([]) a -> (,) (([]) a) (([]) a)
Base.List.takeWhile :: (a -> Base.Bool.Bool) -> ([]) a -> ([]) a
Base.List.dropWhile :: (a -> Base.Bool.Bool) -> ([]) a -> ([]) a
Base.List.span :: (a -> Base.Bool.Bool) -> ([]) a -> (,) (([]) a) (([]) a)
Base.List.break :: (a -> Base.Bool.Bool) -> ([]) a -> (,) (([]) a) (([]) a)
Base.List.reverse :: ([]) a -> ([]) a
Base.List.and :: ([]) Base.Bool.Bool -> Base.Bool.Bool
Base.List.or :: ([]) Base.Bool.Bool -> Base.Bool.Bool
Base.List.any :: (a -> Base.Bool.Bool) -> ([]) a -> Base.Bool.Bool
Base.List.all :: (a -> Base.Bool.Bool) -> ([]) a -> Base.Bool.Bool
Base.List.elem :: Base.Eq.Eq a => a -> ([]) a -> Base.Bool.Bool
Base.List.notElem :: Base.Eq.Eq a => a -> ([]) a -> Base.Bool.Bool
Base.List.lookup :: Base.Eq.Eq a => a -> ([]) ((,) a b) -> Base.Maybe.Maybe b
Base.List.concatMap :: (a -> ([]) b) -> ([]) a -> ([]) b
Base.List.zip :: ([]) a -> ([]) b -> ([]) ((,) a b)
Base.List.zipWith :: (a -> b -> c) -> ([]) a -> ([]) b -> ([]) c
Base.List.unzip :: ([]) ((,) a b) -> (,) (([]) a) (([]) b)

module Base.Either
data Base.Either.Either a b
Base.Either.Left :: a -> Base.Either.Either a b
Base.Either.Right :: b -> Base.Either.Either a b
constructors Base.Either.Either Base.Either.Left Base.Either.Right
instance (Base.Eq.Eq a, Base.Eq.Eq b) => Base.Eq.Eq (Base.Either.Either a b)
instance (Base.Ord.Ord a, Base.Ord.Ord b) => Base.Ord.Ord (Base.Either.Either a b)
instance (Base.Show.Show a, Base.Show.Show b) => Base.Show.Show (Base.Either.Either a b)
Base.Either.either :: (a -> c) -> (b -> c) -> Base.Either.Either a b -> c
Base.Either.lefts :: ([]) (Base.Either.Either a b) -> ([]) a
Base.Either.rights :: ([]) (Base.Either.Either a b) -> ([]) b
Base.Either.isLeft :: Base.Either.Either a b -> Base.Bool.Bool
Base.Either.isRight :: Base.Either.Either a b -> Base.Bool.Bool
Base.Either.fromLeft :: a -> Base.Either.Either a b -> a
Base.Either.fromRight :: b -> Base.Either.Either a b -> b
Base.Either.partitionEithers :: ([]) (Base.Either.Either a b) -> (,) (([]) a) (([]) b)

module Base.Num
class Base.Num.Num a
(Base.Num.+) :: Base.Num.Num a => a -> a -> a
(Base.Num.-) :: Base.Num.Num a => a -> a -> a
(Base.Num.*) :: Base.Num.Num a => a -> a -> a
Base.Num.negate :: Base.Num.Num a => a -> a
Base.Num.abs :: Base.Num.Num a => a -> a
Base.Num.signum :: Base.Num.Num a => a -> a

module Base.Int
data Base.Int
instance Base.Eq.Eq Base.Int
instance Base.Ord.Ord Base.Int
instance Base.Show.Show Base.Int
instance Num Base.Int

module Base.Ordering
data Base.Ordering.Ordering
Base.Ordering.LT :: Base.Ordering.Ordering
Base.Ordering.EQ :: Base.Ordering.Ordering
Base.Ordering.GT :: Base.Ordering.Ordering
constructors Base.Ordering.Ordering Base.Ordering.LT Base.Ordering.EQ Base.Ordering.GT
instance Base.Eq.Eq Base.Ordering.Ordering
instance Base.Ord.Ord Base.Ordering.Ordering
instance Base.Show.Show Base.Ordering.Ordering

module Base.Ord
class Base.Eq.Eq a => Base.Ord.Ord a
Base.Ord.compare :: Base.Ord.Ord a => a -> a -> Base.Ordering.Ordering
(Base.Ord.<) :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool
(Base.Ord.<=) :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool
(Base.Ord.>) :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool
(Base.Ord.>=) :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool
Base.Ord.max :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool
Base.Ord.min :: Base.Ord.Ord a => a -> a -> Base.Bool.Bool

module Base.Show
class Base.Show.Show a
Base.Show.show :: Base.Show.Show a => a -> String

module Base.String
data Base.String
instance Base.Eq.Eq Base.String
instance Base.Ord.Ord Base.String
instance Base.Show.Show Base.String
